* MAP_ROUTE.COB
***************************************************************
*                                                             *
* Copyright (c) 2009 by ACI Worldwide, Inc. All rights        *
* reserved.						      *
*                                                             *
* This Software is confidential and proprietary to IntraNet   *
* and it is protected by U.S. copyright law, other national   *
* copyright laws, and international treaties. The Software may*
* not be disclosed or reproduced in whole or in part in any   *
* manner to any third party without the express prior written *
* consent of ACI Worldwide, Inc.                              *
*                                                             *
* This Software and its related Documentation are made        *
* available under the terms of the IntraNet Software License  *
* and may not be used, reproduced or disclosed in any manner  *
* except as expressly authorized by the Software License. All *
* other uses are strictly prohibited.                         *
*                                                             *
* This Software and its related Documentation are proprietary *
* and confidential material of ACI Worldwide, Inc.            *
*                                                             *
***************************************************************
*
* There are various input mapping modules
* that are used for all input mappers.  They include:
*
*       MAP_ROUTE          -> Common message routing decision maker based on
*			      option set in the mapper due to processing
*			      decisions.
*
*****************************************************************************
%MODULE MAP_ROUTE;
*
*
* MAP_ROUTE subroutine called by the input mappers to route the
* message based on Mr_rout_cond_seq.
*
* If there is a single SEQ entry, we either call message routing
* here with the command OR call ROUTE_REQUEST with ENQ, ID, IRT or
* RTE request and it will use the Mr_rout_cond_seq entry to do so.
* If more than one routing, message routing is called with SEQ
* command and logic exists in message routing to check the
* ROUTE_PRECEDENCE table to determine routing precedence and set
* up the 2nd routing and then process the first.
*
* Option      Routing Result
* ------      --------------
* FTR      -> Route as payment (repair or otherwise)
* EPR	   -> Route to Exception Print Queue
* MRH      -> Route via routing override
* AUTH	   -> Route to AUTHFAILQ
* COR      -> Route to Core verify
* ENQ      -> Route by enqueuing on queue (MRH, SWF_ROUTE queue, WRP queue)
* ID	   -> Route by SWF_ROUTE idtype/id destination
* IRT      -> Route to IRT standing instruction queue
* BUST     -> Route to EXCEPTION Repair Queues
* NOWHERE  -> Route nowhere - create empty destination (for 201, 203, & 941)
*	      [This option, "NOWHERE", was formerly "SPL"]
* DBT_AUTH -> Route "NDA" no debit authority
* PDM      -> Route as possible duplicate
* TST	   -> Route to AUTOTEST or FAI
* RTE	   -> Route to the RTE SI routing override
* ISI      -> Route to "message beam" (CMS_MSGQ) for NWB
* EXC      -> Route to Exception for SUN
* REJ	   -> Route to a REJ queue for rejects and returns
* FX	   -> Route to a FX queue for FX codeword processing
*
* CHANGE HISTORY:
*
* 	K. Callihan		28-Feb-1995
*       Created for the new input mappers for V4.0.
*
*	K. Callihan		30-JAN-1996
*	Add RTE and COR logic
*
*	K. Callihan		05-MAR-1996
*	SPR=14434  Added sysmemo if Route_test is going to FAI
*
*	K. Callihan		05-MAR-1996
*	If routing by PDM, make sure bank of debit and/or credit set is filled
*	in to prevent later message routing traps.
* 
*       K. Callihan	 19-APR-1996
*	Move multiple warnings memo to MAP_SUBS
*
*	K. Griffin       19-JUN-1996
*	PER 642 = Implemented a V3.3 PER for NWB in V4.1.  Special routing
*	for NWB for MT999s when field 79 starts with "NWINQ" and the
*	destination TID is "NBNAUS33".  Added Mapsh_routing_option ISI.
*
*	K. Callihan	20-JUN-1996
*	TIR=17397 Add memo when routing PDM
*
*	K. Callihan	24-JUN-1996
*	TIR=16717 If ENQ to a WRP queue do not allocate a subhistory.
*
*
*	K. Callihan	04-DEC-1996
*	PER = 22722 Add logic to detect /REJT and /RETN codewords in field
*	72 or 79 for SWF96.
*
*	K. Callihan	14-DEC-1996
*	BUG = 22675 Support *INRPRQ routing for all sources.
*
*	K. Callihan	05-JAN-1996
*	PROJ = 18543 Add FX routing for FX codeword support
*
* N. Moore	10-Jan-1997	SPR #23546
*	Added code to C500_MULT_MEMO paragraph to put out a *SYS_MEMO for a
*	single warning/error memo.  Otherwise, RPR doesn't display any warning
*	message when the transaction is brought up on the screen.  RPR 
*	apparently needs to find either *SYS_MEMO or *Memo in the history data;
*	but the actual memo for a single warning is only attached to the 
*	join to the RPR que which is done in MESSAGE_ROUTING (which doesn't
*	know if sys_memo's have or have not gone out; and, really doesn't care).
*
* N. Moore	13-Jan-1997	SPR #23946
*	COR is synonymous with FTR and should set straight thru flag and
*	charge state flag so that customer is properly  billed.
*
* K. Callihan	17-Jan-1997	BUG 23808
*	In C400_SET_CDT_ADV, when a match on a string in the name and address
*	dictates a FED advice, the assignment was done with a MOVE not a
*	subject assign, and so the commit to the database was not done.
*	Changed MOVE to a subject assignment.
*
* N. Moore	11-Feb-1997	SPR #24258 and #25091
*	B600_ROUTE_ENQ was not filling Target_Queue with Target_Queue_ws prior
*	to performing the C600_WILD_QUEUE queue translation paragraph, so it
*	failed.
*
* N. Moore	07-Mar-1997	SPR #26270
*	Charge state flag and Straight through flag needs to be set not just 
*	for FTR's but also COR and RTE msgs.  This also includes messages that
*	need to be tested (TST).  Added code to set flags in ftr set for RTE
*	and TST routing options.
*
* K. Callihan	27-May-1997
*	Added paragraph C700_CHECK_TEST to call BOAs routine GET_TESTKEY and
*	alter test requirements and/or bust the message depending on the 
*	results.  Added logic to also route by destination set up by GMX
*	and not override it unless we have an IRT (or if the message needs
*	testing, go there first). If we have an IRT, we apply that to the
*	destination and route by it but leave the id/idtype in the destination
*	from GMX (to be used by the GET_TESTKEY call).
*
* K. Callihan	30-May-1997
*	Sprs 29539 & 29624 INTRTL_GET_TESTKEY_RQTS should be called only if
*	source not = SWF.
*
* N. Moore	28-Mar-1997	SPR #27148
*	Change perform of C400_SET_CDT_ADV to happen only if cdt id is not on
*	file or, if ambiguous, check to see that cdt_adv_typ is not already set.
*
* K. Callihan	17-Jun-1997	SPR #29925
*	Change FX memo to say "FX codeword detected" when routing FX
*
* K. Callihan   26-Jun-1997	TIR #30488
*	In C700_check_test, set dest set to mod for updating from intrtl
*	routine and not trap.
* K. Callihan    15-Jun-1997	SPR #30545
*	Introduce Map_ignore_dest config flag for routine override logic
* B. Lanza	23-Jul-1997	SPR 31773 
*	Dest is being put at top of message history instead of at the end.
*	Changed to position the ent_msg_history to END before allocating
*	in paragraph C200_ALLOC_SUBHIST.
*
* A. Villa	09-Sep-1997	SPR 33228
*	In C700_CHECK_TEST, do not connect to Ent_dst_set if Ent_dst_seq_cursor
*	is SEQ_END.  Pass a blank Tmp_carrier_dst in the ensueing call.
*	
* K. Hanlon	11-Sep-1997	SPR 33895
*	In C700_check_test, if the destination is not allocated and we must
*	update the test out, then allocate one.
*
* K. Hanlon	30-Oct_1997	SPR 35589
*	Call routine in c700_check_test for all sources
*
* K. Hanlon	19-Nov-1997	SPR 36252
*	If destination is allocated due to BOA intrtl routine returning
*	and outbound test required, then the destination counter must be
*	set to 1.
*
* K. Hanlon	22-Nov-1997	SPR 36188
*	BOA intrtl routine GET_TESTREQ was not getting called it message is
*	routing by ENQ causing incoming test req status to not be set
*	correctly.   
*
%^ H. Podany	22-Jan-1998	International project
%^	Support "CHQ" advice type.
%^
* B. Lanza	23-Jan-1998	SPR 37791	migrated from V4.2
*	Trap with string field overflow.  Routing_memo_length_ws
*	was 80 before call to scan_dispose, Maximum length allowed is 40.
*
* K. Hanlon	01-Feb-1998	SPR 38876
*	Remove setting of charge state if full_parse is "V" and let
*	the parsing dictionary set it.
*	
* K. Hanlon	18-Mar-1998	SPR 40336
*	Do not set test required status if INTRTL_GET_TESTKEY_RQTS returns
*	inbound test required if test state is "P".
*
* K. Hanlon	22-Mar-1998	PER 40461
*	Enhance MRH routing option to route via a command string passed
*	in the mapper enqueue in the format *MRH/MAP/command.  Previously,
*	this option was used just in SWFIN but now it is used in both
*	mappers and has been enhanced to preserve the original routing.
*	Also, moved logic to preserve original destination set up by
*	the swf routing table to it's own paragraph since it is exectuted
*	by several routing options.
*
*
* K. Hanlon	27-Mar-1998	SPR 41204
*	New paragraph to set up orig dest not getting performed in 
*	route_test causing AUTOTEST to trap due to no MRH memo.
%^
%^ Fred P. Isaacs  31-Mar-1998  SPR 41350
%^ 	GO TO had been erroneously retained to a tag which was not moved
%^	when C150_SAVE_ORIG_DEST paragraph was created.  This caused somewhat
%^	unusual multiple routings.  Also fixed C150_ORIG_DEST paragraph to
%^	save EITHER the MRH memo (if necessary) OR the dest set.
%^
*
* K. Hanlon	6-Mar-1998	
*	Looked over change for 41350 and we do want to perform C150 for
*	MRH and REJ routings since they may continue on to the intended
*	destination afterwards.
*
*				SPR 41586
*	In C700_check_test, if the dest set is not connected can not
*	just assume seq is connected and connect up the set.  Rather,
*	reconnect the seq and set together.  If the seq was not connected
*	we trapped with invalid cursor.
*	
*
*  K. Hanlon	15-Apr-1998	SPR 41878
* 	Everywhere ffant_hist is used, break Ffant_hist before connecting
*       to avoid subject connect trap should someone else not
*	break the connection when using ffant_hist.
*
* 
* K. Hanlon	15-Apr-1998	SPR 41911
*	Add perform of C700_CHECK_TEST to the ROUTE_PDM paragraph so that
* 	the test req in/out is set before we go to a PDM queue.
*
* K. Hanlon	28-Apr-1998
*	Save off target type when setting up the destination for route_id
*	to allow for the emf destination override of type as well.
*	Also, pass it into wire_adr to select dest by type.
*
*
* K. Hanlon	15-May-1998  SPR 41367
*	When a tlx messages needs testing and also calls INTRTL_GET_TESTKEY_RQTS
*	which returns a test out status requiring a dest to get allocated,
*	the dest is not getting enqueued in subhistory correctly causing FAI
*	to trap.
*
* K. Hanlon	28-may-1998	SPR 43359
*	For fully parsed payments, tran type gets set in FTRSCR_EDITS.  For
*	non-fully parsed payments RPR defaults the tran type when message is
*	brought up in repair.  But, if the operator cancels the messge, tran
*	type never gets set and does not get picked up in the claims extract.
*	So, if it is blank before we are routing it, set it to FTR here.
*	
* K. Hanlon	26-Jun-1998	SPR 44316
*	If route via MRH override, still call get_testkey_rqts to establish
*	test req in and out for WRP operator.
*
* K. Hanlon	23-Aug-1998 	SPR 46071 same as:
*	SPR 44920 Break ent_msg_subhist before connecting in C700_CHECK_TEST
*	to avoid subject already connected traps (fixed in 4.3V).
*
* D. Ryan	19-Oct-1998	#47465
*	For incoming telexes, Rte: and Queue: are being incorrectly filled when
*	the message is a possible duplicate and the Incoming_msgtype is "FRF".
*	In C150_save_orig_dest, the "ENQ" hard coding is being is now being 
*	by-passed for these conditions.
*
*
* K. Hanlon	01-Dec-1998	SPR 49215
*	For MRH routing overrided (ROUTE_MRH), if a subhist is not allocated
*	allocate one.  Most overrides from link will go to WRP and if a
*	dest is not allocated, WRP/FAI will trap when trying to dispose.
*
*
* Kristen Hanlon	16-Sep-1999 PORT resynch
*
*  The following sprs have been migrated from 4.5 vAX to PORT 1.0
*
*  MPER 48541 - Migration of #42789
*      Implement Party Determination Processing.
*      Party Determination is an extension of the Parsing Dictionary.
*      A client may choose to implement two API's for client-specific
*      Party Determination processing.  The first API occurs prior
*      to the REL lookups (this is the so-called Parsing Dictionary call).
*
*      The second API is performed after the Rel Lookups.  INTRTL flag
*      PD_enqueue_to_server indicates whether the client has implemented
*      this API.  The functionality for API-2 is handled by a special server,
*      the PD_SERVER.  Therefore, if the client has chosen to implement
*      API-2, the mapper will have to perform special routing to deliver
*      FTR items to the PD_SERVER Queue.
*
*  PER 53454 - Migration of PER 42966
*       Add PDM_found_ws (a new flag in MAP_FSECT.DDL) to:
*           a. Suppress the "Possible duplicate detected" memo if a PDM was found.
*               The "PDM_VFYQ Matches: TRN, TRN, ..." will be used instead
*           b. Move "DDM" to command_str_ws to route TRN to the PDM_VFYQ.
*
*
*Routing command "PDQ" is used to route messages to the PD_SERVER Queue.
*
*  PER 41433 - When the message is straight-through and party determination
*	returns a value of "V" (i.e. the message goes to verify), set
*	the new STR_THRU_VFY_FLG to "Y".  This indicates that the
*	message went "straight to verify" for reporting purposes.
*
*  SPR 55032 - Regression bug from 53129 change above.  Missed changing type_a_one
*	check in one location so 3 ids we not getting detected.
*
* K. Hanlon	14-Oct-1999	SPR 58232
*	Perform ftr edits and processing if failed debit authority check.
*	No reason not to and processing will fill in debit and credit amounts.
*
* K. Hanlon	27_Oct-1999	SPR 58595
*	In Alloc_subhist, if routing option is IRT we overlay existing
*	dests differently.  Added check for rtg_option_save since we need
*	to do this if we are heading for autotest yet original dest was
*	IRT and we already had a dest from a link.
*
* K. Hanlon	05-Nov-1999	Spr 58766
*	In save_orig_dest, logic was skipping over allocating a dest for FRFs
*	since we do not want PDMS to have a dest.  But, check was just for FRFs so
*	IRTs routing was not getting saved for FRFs.  Added check for rtg_option_save
*	of Pdm.
*
* K. Hanlon	08-Nov-99 	Migrated the following
*
*	SPR 58130 - Add parameter Misc_memo_len to MAP_ROUTE call to pass the
*	correct length of the memo to message_routing not hardcode to 80.
*
*
* Kristen Hanlon 27-DEC-1999	59834 60065 (Migrated for Fred Isaacs)
*	Changed Misc_memo_len argument to a %Length so it works correctly.
*	Also changed ALLOC_ELEM to ALLOC_END for message history element and
*	skipped writing zero-length memos.
*
* Kristen Hanlon 31-Dec-1999	59856
*	Code Health Week changes: Changed some GO TOs (more needs to be done),
*	clean up "%end."'s and cleaned up some comments.
*
* Fred P. Isaacs	6-JAN-2000	60167
*	Hooked up cutoff time tables to mapper.
*
* Kristen Hanlon 16-Feb-2000	61266
*       Fixed trap while executing the @RTC- routing 
*
* Kristen Hanlon 6-Mar-2000	61697
*	When enqueing to a wire repair queue, added .txt = trn_ref
*	since QUS requires it.
*
* Kristen Hanlon 30-Apr-2000
*	Fixed go to issues for java translater.
*
*
* Kristen Hanlon 7-May-2000	61949
*	Change straight-thru flag to "N" and charge_state flag to "F" if
*	processing a RTE SI.
*
* Kristen Hanlon 7-May-2000	61964
*	Add mapsh_routing_option of Pd_route to allow for party determination
*	routing override to take precedence over FTR routing.
*
* Kristen Hanlon 15-May-2000	62534
*	If we are routing via command MRS we trap on ffant_hist not connected
*	because we now break it during the C700 paragraph.  Use Maprt_save_hist
*	instead of ffant_hist to save off history points for MRS routing.
*
* David Boyajian 14/21-Aug-2000	63276 & 56284
*	Bring over changes from VAX 4.5 to AIX 1.0 and 1.1:
*	In "Routing_Loop" paragraph, where SPL was previously used as
*	a Routing_Option, use NOWHERE.	In this spirit, rename B1000_Route_SPL
*	to B1000_Route_NOWHERE.
*	Reason: This reflects the fact that an MT941 message is now to be
*	routed NOWHERE after being dequeued from SWFINQ.
*	SPL has been renamed NOWHERE in Routing_Option's definition
*	in Mapshr_fsect.ddl.
*
* E. Osterberg	09-Dec-2000	Spr 56936
*	Add routing of 920 statements to Auto Swift Statement server, 
*	change hard coded routing option constants to names.	
*
* K. Hanlon	05-Mar-2001	72000
*	Y-copy support to handle MAC and PAC double authentication
*
* D. Boyajian	18-May-2001	SPR 69496
*	Add "CASCADE ROUTING capability":
*	Because we expect an ADMIN message (SWIFT or ISO TELEX) that will
*	travel a Cascade Route will necessarily hit paragraph B600, that
*	is the ONLY place in this module where we made Cascade enhancements.
*
*	Background:
*	The NAME of a Cascade Route is in the "destination queue" linkage arg
*	that is returned from SWF_ROUTING_MATCH.  In this case, it's not
*	really a queue name, of course, but rather the name of a Cascade Route
*	within Config Table CASCADE_ROUTING_TABLE.
*	Remember, a "Cascade Route Name" is not a queue name but rather, from
*	looking at that Config Table, simply tells us the names of the ACTUAL
* 	set of queues to which a msg on that cascade will be serially routed.
*
* K. Hanlon	21-May-2001	#69234
*	Add B2000_* paragraph to route late messages due to CLSTIME.
*
* J. Carey	23-Oct-2001	#67636]
*	Implement customized cutoff-time processing.  All this means is
*       that the call to subroutine GET_CUTOFF_TIMES has been replaced by
*	a call to subroutine CUST_GET_CUTOFF_TIMES.
*
* K. Hanlon	06-Dec-2001	70009
*	Add logic for routing option scanner
*
* K. Hanlon	09-Dec-2001	#76793
*	If we do not need to test a message that should have been split but we are
*	now past the subroutine, set delay split flag and split it now.
*
* K. Hanlon	09-Dec-2001	#79269
*	Make sure 76793 change above is just for 201, 203 or 204s. Was causing MT101s
*	to create an extra message.
*
* K. Hanlon	27-Dec-2001	#70009
*	Set message routing command call for scanner to TRAP not EXIT
*
* K. Hanlon	24-Feb-2002	#82039
*	If we do not need to test a 210 that should have had anticipations created but we are
*	now past the subroutine, set delay split flag and create them now.
*
* T. Welch	15-may-2002	76638
*	account expansion changes... maprt_target_id, maprt_target_route_id
*
* T. Belknap    16-May-2002     SPR 76377
*       EUROPEAN DATE CONVERSION
*       Put release_time into the time fields of the prime_send_date.
*       Put send_date into the date fields of the prime_send_date.
*       Replace the value_date in ftr_set with Cdt_value_Date in credit_set.
*
* K. Hanlon	20-Aug-2002	SPR 88002
*	Remove SET_CDT_ADV paragraph since we never want to default it and let
*	channel determination figure it out.
*
* K. Hanlon	29-Oct-2002	SPR 90944
*	Remove calls to CUST_GET_CUTOFF_TIMES which are now obsolete and
*	have been replaced with CUTOFF_DETERMINATION.
*
* K. Hanlon	06-Jan-2003	94279
*	Use debit value date to check cutoff not credit value date
*
* K. Hanlon	26-Jan-2003	94959
*	Break ent_dst_set and ent_msg_subhist if connecting to one in alloc_subhist
*
* T. Carroll	30-Jan-2003	95345
*	Remove PD_FSECT and checked the party determination parameter list fields
*	which reside in the MAPSHR_FSECT.
*
* K. Hanlon	22-Feb-2003	95995
*	Do not move -1 to Mapsh_routing_option after ROUTE_TEST since we now
*	use  Maprt_routing_done to indicate if we need to continue routing.
*
* T. Carroll	03-Mar-2003	Spr 96300
*	Renamed the party determination parameter list and moved it into the 
*	ENT_FSECT.   
*
* J. Curley	11-Mar-2003	92226
*	Add special repair queue for CUST_JUST_PAYMENT failures - set Mapsh_msg_command
*	to JPR 
*
* J. Curley	12-Mar-2003	97037
*	Change SEARCH to SCAN: when searching for *SUB_HISTORY in msg_history to correct
*	SBJ$_INVSEARCH trap.
*	
* B. Lanza	08-Jul-2003	101070
*	When putting message on the RPRQ, fill in the detail 
*	fields (that are used on message select detail screen). 
*	Add call to IDPARTY subroutine. 	
*
* K. Hanlon	28-Oct-2003	PROJ 98430
*	Add support for WAR routing in ftr routing to send concatenated collective
*	MT101s to the warehousing queue.
*
* J. Walsh	31-Oct-2003	106669
*	Change last argument of call to MESSAGE_ROUTING from  Maprt_omitted_wc 
*	(long = zero) to Maprt_check_bal_log (str(1) = "Y") so that ballogs and 
*	adr_msg_que entries will be made.
*
* D. Ryan	03-Nov-2003	104939
*	Resetting the dst_state to "F" in three paragraphs since the destination
* 	has not really been enqueued yet.  This is being done just before the call
* 	to "scan_dispose" and will then allow "dispose" to enque the
* 	destination.  B600_ROUTE_ENQ, B700_ROUTE_ID, B800_ROUTE_IRT.
*
* K. Hanlon	13-Jan-2004	103624
*	Change arg for CUTOFF_DETERMINATION of screen_mode to failure and only
*	route via EXC if route to exc or route to vfy returned.
*
* K. Hanlon	13-Jan-2004	108271
*	Change date check for CUTOFF_DETERMINATION to compare menu date agains
*	prime send date not debit value date.
*
* K. Hanlon	25-Feb-2004	109672
*	Removed setting full parse flag to "N" for routing REJ to allow more
*	flexibility for banks routing.
*
* K. Hanlon	08-Mar-2004	105009
*	Perform FTR processing on COR and RTE items because these are payments
*	that need credit hold and other payment flags set for later processing.
*
* K. Hanlon 	31-Mar-2004	110606
*	Move get_testkey_rqts to saf_iso which allows us to remove the delay_split
*	checks since we will know the autotest decision earlier.
*
* K. Hanlon	06-Apr-2004	111770
*	Set dest out here not in saf_iso while creating the dest to avoid not connected
*	traps, mainstream allocation in one spot and use mapsh_test_out value to set
*	the dest test out value.
*
* D. Ryan	07-May-2004	112130
*	In c200_alloc_subhist set the dst_state to "Q" if there is a destination queue
*	name.  Otherwise set it to "F".  Also modified C250_alloc_new_subhist and
*	C260_alloc_dest_out.
*
* K. Hanlon	12-May-2004	109328
*	Change cutoff logic to do not call CUTOFF_DETERMINATION if Mapsh_full_parse_flag is "N",
*	if route_to_vfy_is use routing command "CTV" and if route_to_vfy_is or route_to_exc_is then
*	write a sysmemo indicating that fact (copied from isi_map).
*
* K. Hanlon	19-May-2004	109328
*	Clean up swfrout_mode parameters into MESSAGE_ROUTING.  Should always be swfrout_command.
*
* K. Hanlon	02-June-2004	113582
*	Do not set full parse to "N" upon LATE routing.
*
* K. Hanlon	21-Jun-2004	112172
*	Perform C050_FTR_PREOCESSING when EXC routing from autotrieve or cutoffs
*
* K. Hanlon	06-Jul-2004	113545
*	Fix IRT processing rule logic to find the params correctly and set up the destination correctly.
*
* J. Curley	13-Aug-2004	114966 (migrate)
*	Reinstate some of C400_SET_CDT_ADV removed thinking they would be implemented in
*	Channel_Determination (related to CHIPS defaulting).  Don Beer recommended they be 
*	reinstated here rather than in channel_determination because they were releated only
*	to incoming swift messages.
*
* K. Hanlon	08-Sep-2004	115981
*	Change debit adr bank to queue bank if enqueing to a queue in another
*	bank and changing owning bank to that bank to aviod later message routing trap.
*
* K. Hanlon	29-Sep-2004	117418
*	Make sure test_out_flag of the destination always gets updated.
*
*
* K. Hanlon	30-Sep-2004	117418
*	Set up destination with carrier info for CUST_GET_TESTKEY_REQTS in SAF_ISO for
*	EMF enabled so do not do it again if emf_enabled and routine by idtype/id.
*
* K. Hanlon	03-Oct-2004	117521
*	IN paragraph B700_ROUTE_ID previously changed call to WIRE_ADR to set up destination
*	if rel id was zero  to avoid already connected traps.  But, instead SAF_ISO cleaned
*	up the dest connections when WIRE_ADR is called to get the carrier for CUST_GET_TESTKEY_REQTS
*	and carryover was causing this to NOT be done (SWFIN) and trap.
*
* K. Hanlon	09-Dec-2004	58631
*	Fix WILD_QUEUE logic when *INRPRQ is the queue name and we fill the source in
*	where the * is as in SWFINRPRQ.
*
* K. Hanlon	16-Mar-2005	119631
*	Separate out PD routing from FTR processing since it can be done for admins.
*
* K. Hanlon	16-Mar-2005	119849
*	If route_to_exc returned from CUTOFF_EDITS then set routing command to CTX.
*
* K. Hanlon	13-Apr-2005	PROJ 88354
*	Rewrote routing logic.  Mappers now create entries in Mr_rout_cond_seq instead
*	of setting a oneof (Mapsh_routing_option) to allow for the ability to pick and
*	choose routings when more than one encountered.  If more than 1 routing, message_routing
*	is called with command SEQ.  This triggers a call to cust_routing_cmd which checks
*	the ROUTE_PRECEDENCE table for the 1st and 2nd precedence entries.  The second one
*	is either saved by a *MRH sysmemo storing the command or if 2nd routing was to a
*	queue, id/idtype or IRT then the subhistory/destination is set accordingly.
*	If the 1st routing is queue, id/idtype, IRT or RTE, a call to REQUEST_ROUTE is made
*	to process them, passing in the Mr_rout_cond_seq with the necessary seq elements filled
*	in to complete the processing.
*
* K. Hanlon	27-May-2005	123635
*	Make sure if not SEQ routing and a mandatory next routing is Rcs_Rtg_Memo1 is populated,
*	make sure it is used as the routing memo in message routing call.
*
* J. Curley	23-Jun-2005	121669 (migrate)
*	Route MT101 and MT102's payments as multiples.
*
* K. Hanlon	02-Dec-2005	126949
*	If base amount not = ftr amount or zero then add it to the amount index.
*
* K. Hanlon	28_Jan-2006	124743
*	When coding this EPER to route via ID, needed to change the route_request
*	type parameter from "ID" to "ID ".
*
* J. Curley	21-Aug-2005	123768 (migrate K. Hanlon 17-Aug-2005)
*	Cutoff_determination should only be called if menu date is the same as
*	prime send date.
*
* K. Hanlon	11-Jan-2007	133582
*	Only perform cutoff checks if processing a payment.
* 
* D. Ryan	28-Jan-2009	CR6220
*	If there is an error message returned from the call to Route_request,
*	then use that error message and route the transaction accordingly.
*
* J. Curley	19-Feb-2009	cr8002
*	Correct typo in cr6220 when calling message routing because ROUTE_REQUEST
*	returned an error it was using WRP instead of command EXC.  Corrected 
*	command used in message routing call.
*
* End revision history
* ----------------------------------------------------------------------------


%def 	<ACE>		%`SBJ_DD_PATH:ACE_FSECT.DDL`		%end
%def 	<ENTFTR>	%`SBJ_DD_PATH:ENTFTR_FSECT.DDL`		%end
%def 	<ENT>		%`SBJ_DD_PATH:ENT_FSECT.DDL`		%end
%def 	<MAP>		%`SBJ_DD_PATH:MAP_FSECT.DDL`		%end
%def 	<MAPSHR>	%`SBJ_DD_PATH:MAPSHR_FSECT.DDL`		%end
%def    <FFANT>         %`SBJ_DD_PATH:FFANT_FSECT.DDL`          %end
%^%def 	<PD>		%`SBJ_DD_PATH:PD_FSECT.DDL`		%end
%def 	<RELGET>	%`SBJ_DD_PATH:RELGET_FSECT.DDL`		%end
%def 	<ROUTE>		%`SBJ_DD_PATH:ROUTE_FSECT.DDL`		%end

%def				%^ local fsect
Maprt_compose:			COMPOSE;
Maprt_route_parse:		parse(^FTRAP, ^LINE_SKIP, ^SPACE_SKIP);
Maprt_rtcode_parse:		parse(^FTRAP);
Maprt_Temp_memo:		Vstr(80);
Maprt_routing_memo:		vstr(80);
Maprt_Oneof_ord_ws:		Word;
Maprt_long_vstr: 		Vstr(264);
Maprt_return_status:		Boolean ;
Maprt_dst_seq_conn:		long ;
Maprt_check_bal_log:		str(1) = "Y";

Maprt_2nd_routing_memo:		Vstr(80);
Maprt_temp_command:		Str(3);
Maprt_error_memo:		Vstr(80);


%^ Cutoff_determination
Maprt_Conn_msg_needed:		Boolean = Failure_is;
Maprt_Screen_mode:		Boolean = Failure_is;
Maprt_Settle_action:		Oneof ( %`SBJ_DD_PATH:CUTOFF_ACTION_ONEOF.DDF` );
Maprt_Pay_action:		Oneof ( %`SBJ_DD_PATH:CUTOFF_ACTION_ONEOF.DDF` );
Maprt_Risk_action:		Oneof ( %`SBJ_DD_PATH:CUTOFF_ACTION_ONEOF.DDF` );
Maprt_Instr_action:		Oneof ( %`SBJ_DD_PATH:CUTOFF_ACTION_ONEOF.DDF` );
Maprt_Instr_err_level:		Str(20);
Maprt_cut_status:		Boolean;

Maprt_cust_rout_sts:		Boolean;
Maprt_routing_ctr:		Word;

Maprt_Date_Ws:                  DATE;

Maprt_amount_ndx:		que(	%`SBJ_DD_PATH:AMT_INDEX.DDF`);


%End


%LINKAGE

01  Misc_memo_len 		%Length;
01  Misc_memo_ls  		%Str(80);
01  Map_route_status_ls		%Boolean ;

%Procedure USING Misc_memo_len, Misc_memo_ls RETURNING Map_route_status_ls.
A100_MAIN.



	PERFORM B000_INITIALIZATION THRU B000_INITIALIZATION_END.


        %BEG Maprt_Date_Ws = Ent_Ftr_Set.Prime_Send_Date.Date_Time; %END
	If (Payment_cutoff of Menu_cfg = "T" ) and (Mapsh_payment = 1) THEN
	    PERFORM B100_CHECK_CUTOFF through B100_CHECK_CUTOFF_END
	END-IF.

	If Mapsh_Swfrout_mode = "RPR" then
	   PERFORM B200_FTR_PROCESSING THRU B200_FTR_PROCESSING_END
	End-if.
	PERFORM B300_MULT_MEMO THRU B300_MULT_MEMO_END.

*
* This custom routine can add entries, delete entries or change entries
*
 	Call "CUST_CHG_ROUT_SEQ" using
	     by reference Maprt_error_memo
	     by reference Maprt_error_memo_length
	returning Maprt_cust_rout_sts.

	Move zero to Maprt_routing_ctr
	%Beg First: Mr_rout_cond_seq; %End
	Perform until seq_end_is in Mr_rout_cond_seq_cursor
	   Add 1 to Maprt_routing_ctr
	   %Beg Next: Mr_rout_cond_seq; %End
	End-Perform.

	%Beg First: Mr_rout_cond_seq; %End

*
* If only a single routing entry then handle it here.
* ROUTE_REQUEST contains the logic to routie via ENQ, ID/IDTYPE, IRT and RTE
* and uses the Mr_rout_cond_seq entries to achieve the routing.
*

	If (Maprt_routing_ctr = 1) then

	   Evaluate Rcs_category of Rcs_route of Mr_rout_cond_seq 

	      When "SWFRTE/Q"
	
	         %Beg
	         Mr_rout_cond_seq.Rcs_routing_selected = "X";
	         UPDATE: Mr_rout_cond_seq;
	         %End
	         Call "ROUTE_REQUEST" USING
	              by content	"MAP"
	     	      by reference 	Mapsh_msg_command 
	     	      by content	"ENQ"
	     	      by reference 	Maprt_error_memo
	              by reference 	Maprt_error_memo_length
	         Returning Maprt_Return_status

	      When "SWFRTE/I" 

	         %Beg
	         Mr_rout_cond_seq.Rcs_routing_selected = "X";
	         UPDATE: Mr_rout_cond_seq;
	         %End
		 Call "ROUTE_REQUEST" USING
	               by content	"MAP"
	     	       by reference 	Mapsh_msg_command 
	     	       by content	"ID "
	     	       by reference 	Maprt_error_memo
	               by reference 	Maprt_error_memo_length
	          Returning Maprt_Return_status

	      When "PRM/IRT" 

	         %Beg
	         Mr_rout_cond_seq.Rcs_routing_selected = "X";
	         UPDATE: Mr_rout_cond_seq;
	         %End
		 Call "ROUTE_REQUEST" USING
	               by content	"MAP"
	     	       by reference 	Mapsh_msg_command 
	     	       by content	"IRT"
	     	       by reference 	Maprt_error_memo
	               by reference 	Maprt_error_memo_length
	          Returning Maprt_Return_status

	      When "PRM/RTE" 

	         %Beg
	         Mr_rout_cond_seq.Rcs_routing_selected = "X";
	         UPDATE: Mr_rout_cond_seq;
	         %End
		 Call "ROUTE_REQUEST" USING
	               by content	"MAP"
	     	       by reference 	Mapsh_msg_command 
	     	       by content	"RTE"
	     	       by reference 	Maprt_error_memo
	               by reference 	Maprt_error_memo_length
	          Returning Maprt_Return_status

	      When other		


		 %Beg Maprt_routing_memo = Mr_rout_cond_seq.Rcs_Rtg_Memo1; %End

		 Call "MESSAGE_ROUTING" using
	 	      by Value     9
	 	      by content   "MAP"
	 	      by reference Rcs_command of Rcs_route of Mr_rout_cond_seq
	 	      by content   "TRAP"			
	 	      by reference Mapsh_msg_command			
		      by reference Maprt_routing_memo_length
	 	      by reference Maprt_routing_memo
	 	      by reference Mapsh_full_parse_flag
	 	      by reference Maprt_check_bal_log		
	         RETURNING Maprt_return_status
	     
	   End-evaluate

	Else

*
* More than one entry, so use SEQ command to tell message routing to check the ROUTE_PRECEDENCE table
* and store off 2nd routing and perform first routing.
* The call is with EXIT because if primary routing is one of the above, ROUTE_REQUEST routes them (ENQ,ID,IRT,RTE)
* and we simply exit with no command.
*
	   Call "MESSAGE_ROUTING" using
	 	 by Value     9
	 	 by content   "MAP"
	 	 by content   "SEQ"
	 	 by content   "EXIT"			
	 	 by reference Mapsh_msg_command			
		 by reference Maprt_routing_memo_length
	 	 by reference Maprt_routing_memo
	 	 by reference Mapsh_full_parse_flag
	         by reference Maprt_check_bal_log
	   RETURNING Maprt_return_status

	End-if.


	If Failure_is in Maprt_return_status then

%^ CR6220 Check if there was an error returned from the call to route_request

	    If Maprt_error_memo_length > Zero
	    Then
		%Beg
		    Maprt_routing_memo = Maprt_error_memo;
		%End

	   	Call "MESSAGE_ROUTING" using
	 	    by Value     9
	 	    by content   "MAP"
	 	    by content   "EXC"
%^ CR6220	 	    by reference Rcs_command of Rcs_route of Mr_rout_cond_seq
	 	    by content   "TRAP"			
	 	    by reference Mapsh_msg_command			
		    by reference Maprt_routing_memo_length
	 	    by reference Maprt_routing_memo
	 	    by reference Mapsh_full_parse_flag
	 	    by reference Maprt_check_bal_log		
	  	    RETURNING Maprt_return_status
	    Else
	   	%Beg Maprt_compose ^OUT(Maprt_routing_memo)
			"Failure to correctly route this message", /; %End


	   	Call "MESSAGE_ROUTING" using
	 	 by Value     9
	 	 by content   "MAP"
	 	 by content   "EXC"
	 	 by content   "TRAP"			
	 	 by reference Mapsh_msg_command			
		 by reference Maprt_routing_memo_length
	 	 by reference Maprt_routing_memo
	 	 by reference Mapsh_full_parse_flag
	 	 by reference Maprt_check_bal_log		
	  	RETURNING Maprt_return_status
	    End-if
	End-if.


A100_MAIN_END.
	%EXIT PROGRAM.


B000_INITIALIZATION.
*
* Subroutine initializaton
***************************


	SET Success_is in Map_route_status_ls to true.
	Move zero to Maprt_routing_ctr.

	%Beg Maprt_dst_seq_conn = Ent_dst_seq State.conn; %End

	If (Maprt_dst_seq_conn = 0 )
	    %Beg  Ent_msg_union.dst_seq CONN: Ent_dst_seq;  %End
	END-IF.

	Move Misc_memo_ls to Maprt_routing_memo.
	Move Misc_memo_len to Maprt_routing_memo_length.




B000_INITIALIZATION_END.
	exit.

B100_CHECK_CUTOFF.



	If Mapsh_full_parse_flag = "N" then
	   GO TO B100_CHECK_CUTOFF_END
	End-if.
	%Beg Maprt_temp_command = ""; %End


* Call cutoff determination to see if this message is past instruction cutoff for the designated channel
	Set Check_cutoff_is in Maprt_Instr_action to true.
	Call "CUTOFF_DETERMINATION" using 
		by reference Maprt_Conn_msg_needed
		by reference Maprt_Screen_mode
		by reference Maprt_Settle_action
		by reference Maprt_Pay_action
		by reference Maprt_Risk_action
		by reference Maprt_Instr_action
		by reference Maprt_Instr_err_level
	returning		Maprt_cut_status.


* If the message is otherwise ready to release but cutoff check failed,
* set the flag to tell caller that lookups must be done again

	If (Route_to_exc_is in Maprt_Instr_action) THEN
	   Move "CTX" to Maprt_temp_command    
	   %Beg Maprt_Routing_Memo = "Past Cutoff or Cutoff Failed"; %End
	END-IF.

	IF (Route_to_vfy_is in Maprt_Instr_action) THEN
	   Move "CTV" to Maprt_temp_command    
	   %Beg Maprt_Routing_Memo = "Request routing to verify by Channel Determination."; %end
	END-IF

	If Maprt_temp_command NOT = spaces then

	
	   %Beg Maprt_compose ^OUT(Maprt_2nd_routing_memo) "*MRH/MAP/", Maprt_temp_command, "/", Mapsh_full_parse_flag, /; %End

	   %Beg
	   ALLOC_END: Mr_rout_cond_seq (.Rcs_route(.Rcs_Category 		= "CUTOFF",
		       	        	   	   .Rcs_Command  		= Maprt_temp_command),
				        .Rcs_Routing_Str   		= "",
				        .Rcs_Rtg_Memo1	   		= "",
				        .Rcs_Rtg_Memo2	   		= Maprt_2nd_routing_memo,
				        .Rcs_info_hist_memo		= Maprt_routing_memo);
	   %End
	End-if.


B100_CHECK_CUTOFF_END.
   EXIT.


B200_FTR_PROCESSING.

* Non_balance_risk will set dol_amount (except in multi_currency environment)
* and perform various edits and risk checks

	CALL "NON_BALANCE_RISK".


	If tran_type of Ent_ftr_set = SPACES then
	   %Beg Ent_ftr_set.Typ.tran_type = "FTR"; %End
	End-if.

* Record whether message was structured for charging purposes.

	If Mapsh_Full_parse_flag = "V" then
           %Beg
	       Ent_ftr_set.flgs2(
	           .Straight_thru_flg = "Y",
		   .Str_thru_vfy_flg = "Y" );
           %End
	Else
           %BEG
	       Ent_ftr_set.flgs2(
	       	   .Charge_state_flg = Mapsh_charge_state,
	           .Straight_thru_flg = Mapsh_full_parse_flag );
           %END
	END-IF.



* If credit party was not on file, use algorithm to see if advice type
* should be defaulted to "CHP" - only if SWFIN_NOF_ADV_DFLT not set to F in cfg_rec.dat

	If Swfin_nof_adv_dflt of Menu_cfg NOT = "F" and
	   Cdt_adv_typ of Ent_credit_Set = SPACES and
	   Failure_is in Mapsh_credit_party_ign then


	    If ((cdt_ovr of cdt_typ of Ent_credit_Set = "*") or
	        (cdt_idtype of cdt_typ of Ent_credit_Set = SPACE) or 
	        (cdt_id of cdt_typ of Ent_credit_Set = SPACE)) and
	       (Mapsh_full_parse_flag = "N") then

	  	Perform C100_SET_CDT_ADV thru C100_SET_CDT_ADV_END
	    Else
	   	If Cdt_Ovr of Cdt_Typ of Ent_Credit_Set NOT = SPACE then
	      	    Perform C100_SET_CDT_ADV thru C100_SET_CDT_ADV_END
	    	End-if
	    End-if
	End-if.


* If there is no credit id, but we are able to parse the Credit idtype -
* set Credit idtype to spaces to assist Qualitran lookup.

	If ( Cdt_idtype of cdt_typ of Ent_credit_Set not = space
	and Cdt_id of Cdt_typ of Ent_credit_Set = Space )
	Then %Beg Ent_credit_Set.Cdt_typ.Cdt_idtype = " "; %End
	End-if.

	If (Base_amount of ent_ftr_set not = zero) and 
	   (Base_amount of ent_ftr_set not = Amount of Ent_ftr_set) then

	   %BEG 
	   Break: Maprt_amount_ndx;
	   Ent_ftr_set (NOTRAP, .amt_ndx_join CONN: Maprt_amount_ndx);
	   Ent_ftr_set ETRAP;
	   Amt_index(INSERT);
	   Ent_ftr_set(.amt_ndx_join ALLOC_JOIN: Amt_index(
				.amount 	= Ent_ftr_set.base_amount,
				.currency_code  = Menu_bnk_union.Base_currency_id,
				.value_date 	= Ent_ftr_set.inst_date,
				.Txt 		= Ent_ftr_set.trn_ref,
				.Systime now )) ;
	   Amt_index(READ_ONLY);
	   %END
 	End-if.


B200_FTR_PROCESSING_END.
   EXIT.

B300_MULT_MEMO.

	EVALUATE TRUE
	   WHEN Mapsh_memo_count > 1
	      %Beg
	         Maprt_Temp_Memo = "Multiple warnings - see history";
	      %End
	   WHEN Mapsh_memo_count = 1
	      %Beg
	         Maprt_Temp_Memo = Maprt_routing_memo;
	      %End
	   WHEN OTHER
	      GO TO B300_MULT_MEMO_END
	END-EVALUATE.

	If (Maprt_temp_memo_length > 0 )
	    %Beg
	    ALLOC_END: Ent_Msg_History(.Qname(.Idbank = Mapsh_Current_Bnk_Key,
	   				      .Idloc = null,
	 				      .Idname = "*SYS_MEMO"),
	    			       .Qtype = "OBJTYP$_NULL",
	    			       .Memo = Maprt_Temp_Memo );
	   Maprt_Temp_memo = NULL;
	   %End
	END-IF.


B300_MULT_MEMO_END.
	EXIT.

C100_SET_CDT_ADV.

* Called for a not-on-file credit party.
* Set the default credit advice type (to aid in routing to the
* correct repair queue category) unless configured not to


* If SWIFT address country and city code contain "US3", assume CHP


	IF cdt_idtype of cdt_typ of Ent_credit_set = "S" THEN
	    IF (cdt_id of cdt_typ of Ent_credit_set (5:3) = "US3") AND
	       (Success_is in Mapsh_allow_chp_advice) THEN
		%BEG Ent_credit_set.cdt_adv_typ = "CHP"; %END
		GO TO C100_SET_CDT_ADV_END
	    END-IF
	END-IF.

* If source was SWIFT and message type 200, assume CHIPS

	IF src_code of Ent_ftr_set = "SWF"
	   AND incoming_msgtype of Ent_ftr_set = "200"
	   AND Success_is in Mapsh_allow_chp_advice
	THEN
	    %Beg Ent_credit_set.cdt_adv_typ = "CHP"; %End
	    GO TO C100_SET_CDT_ADV_END
	END-IF.

* If credit name and address contains "NY", "NEW YORK", "NWYRK", "MANHATTAN"
* or "CHIPS", assume CHIPS
              
	%BEG
	COMPOSE ^OUT(Maprt_long_vstr),
		Ent_credit_set.cdt_name1, " ",
		Ent_credit_set.cdt_name2, " ",
		Ent_credit_set.cdt_name3, " ",
		Ent_credit_set.cdt_name4, /;
	Maprt_route_parse ^IN(Maprt_long_vstr),
		Maprt_Oneof_ord_ws (^ONEOF (	(|^STRING, "COMPANY"),
					(|^STRING, "GERMANY"),
					(|^STRING, "NY"),
					(|^STRING, "N.Y"),
					(|^STRING, "NEW", "YORK"),
			     		(|^STRING, "NW","YRK"),
					(|^STRING, "MANHATTAN")));
	%END

	IF Success_is in Maprt_route_parse_status
	   AND (Maprt_Oneof_ord_ws NOT = ZERO AND 1)
	   AND Success_is in  Mapsh_allow_chp_advice
	THEN
  	    %BEG Ent_credit_set.cdt_adv_typ = "CHP"; %END
	    GO TO C100_SET_CDT_ADV_END
	END-IF.


C100_SET_CDT_ADV_END.
   EXIT.



